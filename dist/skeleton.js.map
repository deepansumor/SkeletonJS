{"version":3,"file":"skeleton.js","mappings":"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","sources":["webpack://SkeletonJS/webpack/universalModuleDefinition","webpack://SkeletonJS/webpack/bootstrap","webpack://SkeletonJS/webpack/runtime/define property getters","webpack://SkeletonJS/webpack/runtime/hasOwnProperty shorthand","webpack://SkeletonJS/./src/skeleton.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SkeletonJS\"] = factory();\n\telse\n\t\troot[\"SkeletonJS\"] = factory();\n})(typeof self !== 'undefined' ? self : this, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","/**\r\n * SkeletonJS - A lightweight library for converting HTML elements into \r\n * skeleton loaders with a default shimmer animation.\r\n *\r\n * Features:\r\n *  - Applies a CSS skeleton loader style with a default shimmer animation.\r\n *  - Allows customization of background color, border radius, animation duration,\r\n *    type, and animation background through data attributes or JS options.\r\n *  - Replaces images with spans to hide actual image content.\r\n *  - Clones elements based on the provided skeleton count.\r\n *\r\n * @author\r\n * Deepansu Mor\r\n * @github https://github.com/deepansumor\r\n */\r\n\r\n\r\n// The skeleton CSS string defines the base styling and shimmer animation for skeleton loaders.\r\nconst style = `/* Define CSS custom properties on :root for easy theming. */\r\n:root {\r\n    --skeleton-background-color: #e0e0e0;\r\n    --skeleton-animation-duration: 1.5s;\r\n    --skeleton-animation-type: shimmer; // default animation\r\n}\r\n\r\n/* Base skeleton style. */\r\n.skeletonJS {\r\n    * {\r\n        background-color: var(--skeleton-background-color);\r\n        border-radius: var(--skeleton-border-radius, 0);\r\n        position: relative;\r\n        overflow: hidden;\r\n        color: transparent !important;\r\n    }\r\n\r\n    /* Create the shimmer effect overlay */\r\n    *::after {\r\n        content: '';\r\n        position: absolute;\r\n        top: 0;\r\n        left: -150%;\r\n        width: 150%;\r\n        height: 100%;\r\n        background: linear-gradient(90deg, transparent, var(--skeleton-animation-background, rgba(255, 255, 255, 0.2)), transparent);\r\n        animation: var(--skeleton-animation-type) var(--skeleton-animation-duration) infinite;\r\n    }\r\n\r\n    /* For nested skeleton elements, hide inner content. */\r\n    .skeletonJS * {\r\n        visibility: hidden !important;\r\n    }\r\n}\r\n\r\n/* Default shimmer animation keyframes */\r\n@keyframes shimmer {\r\n    0% {\r\n        left: -150%;\r\n    }\r\n    50% {\r\n        left: 100%;\r\n    }\r\n    100% {\r\n        left: 100%;\r\n    }\r\n}`;\r\n\r\n/**\r\n * injectStyleOnce\r\n * Injects the skeleton CSS into the document head only once.\r\n */\r\nfunction injectStyleOnce() {\r\n  const styleId = 'skeletonjs-style';\r\n  // Check if the style element is already added\r\n  if (!document.getElementById(styleId)) {\r\n    const styleEl = document.createElement('style');\r\n    styleEl.id = styleId;\r\n    styleEl.textContent = style;\r\n    document.head.appendChild(styleEl);\r\n  }\r\n}\r\n\r\n/**\r\n * SkeletonOptions - Interface defining the customizable options for the skeleton.\r\n *\r\n * @property backgroundcolor - The background color of the skeleton.\r\n * @property borderRadius - The border radius of the skeleton.\r\n * @property color - Text color (typically set to transparent).\r\n * @property animationDuration - Duration of the skeleton animation.\r\n * @property animationType - The type of animation (default: \"shimmer\").\r\n * @property animationBackground - The background gradient used in the animation.\r\n */\r\ninterface SkeletonOptions {\r\n  backgroundcolor?: string;\r\n  borderRadius?: string;\r\n  color?: string;\r\n  animationDuration?: string;\r\n  animationType?: string;\r\n  animationBackground?: string;\r\n  // Additional properties can be added as needed.\r\n}\r\n\r\n// Default configuration options for the skeleton loader.\r\nconst defaultOptions: SkeletonOptions = {\r\n  backgroundcolor: '#e0e0e0',\r\n  borderRadius: '4px',\r\n  animationDuration: \"1s\",\r\n  animationType: \"shimmer\"\r\n};\r\n\r\n/**\r\n * applySkeletonStyle\r\n * Applies the skeleton styling to an element by setting CSS custom properties\r\n * based on the provided configuration.\r\n *\r\n * @param element - The HTMLElement to which the skeleton style will be applied.\r\n * @param config - SkeletonOptions containing styling configuration.\r\n */\r\nfunction applySkeletonStyle(element: HTMLElement, config: SkeletonOptions): void {\r\n  element.classList.add('skeletonJS');\r\n  if (config.backgroundcolor) {\r\n    element.style.setProperty('--skeleton-background-color', config.backgroundcolor);\r\n  }\r\n  if (config.borderRadius) {\r\n    element.style.setProperty('--skeleton-border-radius', config.borderRadius);\r\n  }\r\n  if (config.animationDuration) {\r\n    element.style.setProperty('--skeleton-animation-duration', config.animationDuration);\r\n  }\r\n  if (config.animationType) {\r\n    element.style.setProperty('--skeleton-animation-type', config.animationType);\r\n  }\r\n  if (config.animationBackground) {\r\n    element.style.setProperty('--skeleton-animation-background', config.animationBackground);\r\n  }\r\n}\r\n\r\n/**\r\n * transformKey\r\n * Transforms a dataset key by removing the \"skeleton\" prefix and converting the \r\n * first character of the remaining string to lowercase.\r\n *\r\n * @param key - The key from the dataset.\r\n * @returns The transformed key.\r\n */\r\nfunction transformKey(key: string): string {\r\n  // Remove \"skeleton\" prefix (case-sensitive)\r\n  const withoutPrefix = key.replace(/^skeleton/, '');\r\n  if (!withoutPrefix) return key; // fallback if empty\r\n  // Lowercase the first character of the remaining string\r\n  return withoutPrefix.charAt(0).toLowerCase() + withoutPrefix.slice(1);\r\n}\r\n\r\n/**\r\n * transformDataset\r\n * Converts a DOMStringMap (element.dataset) into an object with transformed keys.\r\n *\r\n * @param dataset - The dataset from an element.\r\n * @returns An object with transformed key-value pairs.\r\n */\r\nfunction transformDataset(dataset: DOMStringMap): { [key: string]: string } {\r\n  const output: { [key: string]: string } = {};\r\n  Object.entries(dataset).forEach(([key, value]) => {\r\n    const newKey = transformKey(key);\r\n    if (value) output[newKey] = value;\r\n  });\r\n  return output;\r\n}\r\n\r\n/**\r\n * convert\r\n * Converts a single HTML element into a skeleton loader. It injects styles,\r\n * applies the skeleton styling, replaces images with spans, and handles cloning\r\n * if a data-skeletons-count attribute is specified.\r\n *\r\n * @param element - The HTMLElement to convert.\r\n * @param options - Optional SkeletonOptions to override defaults or dataset values.\r\n */\r\nfunction convert(element: HTMLElement, options?: SkeletonOptions) {\r\n  // Ensure our style is injected only once.\r\n  injectStyleOnce();\r\n\r\n  // Read options from data attributes and transform them.\r\n  const dataOptions: SkeletonOptions = transformDataset(element.dataset);\r\n\r\n  // Merge options: data attributes take precedence over defaults, then function parameters.\r\n  const config = { ...dataOptions, ...options };\r\n\r\n  // Apply the skeleton style to the element.\r\n  applySkeletonStyle(element, config);\r\n\r\n  // Replace images with spans to hide the actual image content.\r\n  const images = Array.from(element.querySelectorAll('img')) as HTMLImageElement[];\r\n  images.forEach((image) => {\r\n    const span = document.createElement(\"span\");\r\n    // Copy inline styles from the image.\r\n    span.setAttribute('style', image.getAttribute(\"style\") || \"\");\r\n    span.style.display = \"inline-block\";\r\n    image.replaceWith(span);\r\n  });\r\n\r\n  // Handle cloning of the element if data-skeletons-count is set.\r\n  const countAttr = element.getAttribute('data-skeletons-count');\r\n  const count = countAttr ? parseInt(countAttr, 10) : 1;\r\n\r\n  if (count > 1 && element.parentElement) {\r\n    // Clone the element the specified number of times.\r\n    const clones = Array.from({ length: count }, () => element.cloneNode(true)) as HTMLElement[];\r\n    const parent = element.parentElement;\r\n    // Replace the original element with the first clone.\r\n    parent.replaceChild(clones[0], element);\r\n    // Append the remaining clones after the first one.\r\n    clones.slice(1).forEach(clone => {\r\n      parent.insertBefore(clone, clones[0].nextSibling);\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * init\r\n * Initializes SkeletonJS on the provided element(s). Accepts a query selector string,\r\n * a single HTMLElement, a NodeList of HTMLElements, or an array of HTMLElements.\r\n *\r\n * @param elements - The target element(s) to initialize as skeleton loaders.\r\n * @param options - Optional SkeletonOptions to override defaults.\r\n */\r\nconst init = (\r\n  elements: string | HTMLElement | HTMLElement[] | NodeListOf<HTMLElement>,\r\n  options?: SkeletonOptions\r\n): void => {\r\n  let elems: HTMLElement[] = [];\r\n\r\n  if (typeof elements === 'string') {\r\n    elems = Array.from(document.querySelectorAll<HTMLElement>(elements));\r\n  } else if (elements instanceof HTMLElement) {\r\n    elems = [elements];\r\n  } else if (elements instanceof NodeList || Array.isArray(elements)) {\r\n    elems = Array.from(elements as NodeListOf<HTMLElement>);\r\n  }\r\n\r\n  elems.forEach(elem => convert(elem, options));\r\n};\r\n\r\n// Expose the init function as part of the SkeletonJS library.\r\nconst SkeletonJS = { init };\r\nexport default SkeletonJS;\r\n"],"names":["root","factory","exports","module","define","amd","self","this","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","init","elements","options","elems","Array","from","document","querySelectorAll","HTMLElement","NodeList","isArray","forEach","elem","element","styleId","getElementById","styleEl","createElement","id","textContent","head","appendChild","injectStyleOnce","dataset","output","dataOptions","entries","value","newKey","withoutPrefix","replace","charAt","toLowerCase","slice","transformKey","config","classList","add","backgroundcolor","style","setProperty","borderRadius","animationDuration","animationType","animationBackground","applySkeletonStyle","image","span","setAttribute","getAttribute","display","replaceWith","countAttr","count","parseInt","parentElement","length","cloneNode","replaceChild","clone","insertBefore","nextSibling","convert"],"sourceRoot":""}